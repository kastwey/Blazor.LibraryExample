@using Blazor.LibraryExample.Shared.Entities
@using Blazor.LibraryExample.Client.Contracts.Services
@page "/books/add/"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject IBookService BookService
<h2>Add new book</h2>
@if (errors.Any())
{
	<h3 id="validationSummaryHeader" tabindex="-1">Check the following errors:</h3>
	<ul>
		@foreach (var error in errors)
		{
			<li>@error</li>
		}
	</ul>
}
<div class="form" onkeypress="@SendFormWithEnter">
	<div class="form-group">
		<label class="control-label" for="txtTitle">Title:</label>
		<input id="txtTitle" type="text" bind=book.Title />
	</div>
	<div class="form-group">
		<label for="txtAuthor">Author:</label>
		<input id="txtAuthor" type="text" bind=book.Author />
	</div>
	<div class="form-group">
		<input type="checkbox" id="chkCollection" bind="book.InCollection" />
		<label for="chkCollection">Is part of a collection</label>
	</div>
	<div class="form-group">
		<button onclick=@Add ref="btnAdd">Add book</button>
	</div>
</div>

@functions
{

	private Book book = new Book();


	private ElementRef btnAdd;

	private List<string> errors = new List<string>();

	protected override Task OnInitAsync()
	{
		this.Title = "Añadir nuevo libro";
		return base.OnInitAsync();
	}

	private async void SendFormWithEnter(UIKeyboardEventArgs e)
	{
		if (e.Key== "Enter")
		{
			await Interop.JsInterop.FocusAsync(btnAdd);
			await Interop.JsInterop.ClickAsync(btnAdd);
		}
	}


	private async Task Add()
	{
		errors = BookService.Validate(book);

		if (errors.Any())
		{
			this.QuerySelectorToFocusAfterRendering = "#validationSummaryHeader";
			return;
		}
		try
		{
			var bookAdded = await Http.PostJsonAsync<Book>("api/books/add", book);
			UriHelper.NavigateTo($"/books/details/{bookAdded.Id}");
		}
		catch (Exception ex)
		{
			await JsInterop.AlertAsync("Error while editing the book: " + ex.Message);
		}
	}


}