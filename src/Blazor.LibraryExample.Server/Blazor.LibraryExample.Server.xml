<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blazor.LibraryExample.Server</name>
    </assembly>
    <members>
        <member name="T:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository">
            <summary>
            The books repository abstraction
            </summary>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository.GetNoveltiesAsync(System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Gets the novelties asynchronous.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>the novelties</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository.GetMostDownloadedsAsync(System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Gets the most downloadeds asynchronous.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>The books most downloaded</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository.GetByIdAsync(System.Int32)">
            <summary>
            Gets a book by its identifier asynchronous.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The book found, null if it was not found</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository.AddAsync(Blazor.LibraryExample.Shared.Entities.Book)">
            <summary>
            Adds a book asynchronous.
            </summary>
            <param name="book">The book.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository.EditAsync(Blazor.LibraryExample.Shared.Entities.Book)">
            <summary>
            Edits a book asynchronous.
            </summary>
            <param name="book">The book.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository.DeleteAsync(System.Int32)">
            <summary>
            Deletes a book asynchronous.
            </summary>
            <param name="bookId">The book identifier.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository.SearchAsync(System.String,System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Searches by keyword asynchronous.
            </summary>
            <param name="searchTerm">The search term.</param>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>The books which matches with the specified term</returns>
        </member>
        <member name="T:Blazor.LibraryExample.Server.Controllers.BooksController">
            <summary>
            The book controller
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Controller" />
        </member>
        <member name="M:Blazor.LibraryExample.Server.Controllers.BooksController.#ctor(Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Blazor.LibraryExample.Server.Controllers.BooksController"/> class.
            </summary>
            <param name="booksRepository">The books repository.</param>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Controllers.BooksController.GetNovelties(System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Gets the novelties.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>All novelties</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Controllers.BooksController.GetMostDownloadeds(System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Gets the books most downloadeds.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>The most downloaded books</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Controllers.BooksController.Search(System.String,System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Searches buts by specified keyword.
            </summary>
            <param name="searchTerm">The search term.</param>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>The search results</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Controllers.BooksController.Details(System.Int32)">
            <summary>
            Gets the details of the specified book
            </summary>
            <param name="bookId">The book identifier.</param>
            <returns>The details for the specified book by <paramref name="bookId"/></returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Controllers.BooksController.Add(Blazor.LibraryExample.Shared.Entities.Book)">
            <summary>
            Adds the specified book.
            </summary>
            <param name="book">The book.</param>
            <returns>if the book has been created successfully, the new entity with its generated identifier.</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Controllers.BooksController.Edit(System.Int32,Blazor.LibraryExample.Shared.Entities.Book)">
            <summary>
            Edits the specified book.
            </summary>
            <param name="bookId">The book identifier.</param>
            <param name="book">The book.</param>
            <returns>if the book has been edited successfully, an Action result with NoContentResult.</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Controllers.BooksController.Delete(System.Int32)">
            <summary>
            Deletes the specified book.
            </summary>
            <param name="bookId">The book identifier.</param>
            <returns>If the book has been deleted successfully, ActionResult with NoContentResult.</returns>
        </member>
        <member name="T:Blazor.LibraryExample.Server.Data.EntityConfiguration.BookEntityTypeConfiguration">
            <summary>
            Class to configure the Book entity
            </summary>
            <seealso cref="!:Microsoft.EntityFrameworkCore.IEntityTypeConfiguration" />
        </member>
        <member name="M:Blazor.LibraryExample.Server.Data.EntityConfiguration.BookEntityTypeConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Blazor.LibraryExample.Shared.Entities.Book})">
            <summary>
            Configures the specified book.
            </summary>
            <param name="book">The book.</param>
        </member>
        <member name="T:Blazor.LibraryExample.Server.Data.LibraryContext">
            <summary>
            The library context to interact with the database.
            </summary>
            <seealso cref="T:Microsoft.EntityFrameworkCore.DbContext" />
        </member>
        <member name="M:Blazor.LibraryExample.Server.Data.LibraryContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Blazor.LibraryExample.Server.Data.LibraryContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Blazor.LibraryExample.Server.Data.LibraryContext"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="P:Blazor.LibraryExample.Server.Data.LibraryContext.Books">
            <summary>
            Gets or sets the books.
            </summary>
            <value>
            The books.
            </value>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Data.LibraryContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Override this method to further configure the model that was discovered by convention from the entity types
            exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
            and re-used for subsequent instances of your derived context.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model for this context. Databases (and other extensions) typically
            define extension methods on this object that allow you to configure aspects of the model that are specific
            to a given database.</param>
            <remarks>
            If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
            then this method will not be run.
            </remarks>
        </member>
        <member name="T:Blazor.LibraryExample.Server.Program">
            <summary>
            program class
            </summary>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Program.Main(System.String[])">
            <summary>
            Defines the entry point of the application.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Blazor.LibraryExample.Server.Repositories.BooksRepository">
            <summary>
            The book repository class
            </summary>
            <seealso cref="!:Blazor.LibraryExample.Server.Repositories.RepositoryBase" />
            <seealso cref="T:Blazor.LibraryExample.Server.Contracts.Repositories.IBooksRepository" />
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.#ctor(Blazor.LibraryExample.Server.Data.LibraryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Blazor.LibraryExample.Server.Repositories.BooksRepository"/> class.
            </summary>
            <param name="libraryContext">The library context.</param>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.GetMostDownloadedsAsync(System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Gets the most downloadeds books asynchronous.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>The most downloaded books</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.GetNoveltiesAsync(System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Gets the book novelties asynchronous.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>The novelties</returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.GetByIdAsync(System.Int32)">
            <summary>
            Gets a book by its identifier asynchronous.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            The book found, null if it was not found
            </returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.AddAsync(Blazor.LibraryExample.Shared.Entities.Book)">
            <summary>
            Adds a book asynchronous.
            </summary>
            <param name="book">The book.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.EditAsync(Blazor.LibraryExample.Shared.Entities.Book)">
            <summary>
            Edits a book asynchronous.
            </summary>
            <param name="book">The book.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.DeleteAsync(System.Int32)">
            <summary>
            Deletes a book asynchronous.
            </summary>
            <param name="bookId">The book identifier.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.ApplyOrder(System.Linq.IQueryable{Blazor.LibraryExample.Shared.Entities.Book},Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Applies the order to the specified IQueryable object.
            </summary>
            <param name="books">The books.</param>
            <param name="order">The order.</param>
            <returns>The books ordered by <paramref name="order"/></returns>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.BooksRepository.SearchAsync(System.String,System.Int32,System.Int32,Blazor.LibraryExample.Server.Repositories.BookOrder)">
            <summary>
            Searches by keyword asynchronous.
            </summary>
            <param name="searchTerm">The search term.</param>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <param name="order">The order.</param>
            <returns>
            The books which matches with the specified term
            </returns>
        </member>
        <member name="T:Blazor.LibraryExample.Server.Repositories.BookOrder">
            <summary>
            The different fields by which the books can be sorted.
            </summary>
        </member>
        <member name="T:Blazor.LibraryExample.Server.Repositories.RepositoryBase`1">
            <summary>
            The base repository from which other repositories should inherit.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Repositories.RepositoryBase`1.PaginateIQueryableAsync(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            Paginates the i queryable asynchronous.
            </summary>
            <param name="query">The query.</param>
            <param name="pageNumber">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <returns></returns>
        </member>
        <member name="T:Blazor.LibraryExample.Server.Startup">
            <summary>
            The Startup class
            </summary>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Blazor.LibraryExample.Server.Startup"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Startup.CreateAndSeedDatabase(Blazor.LibraryExample.Server.Data.LibraryContext)">
            <summary>
            Creates and initializes the database with test records the first time the application starts  at first time
            </summary>
            <param name="libraryContext">The library context.</param>
        </member>
        <member name="M:Blazor.LibraryExample.Server.Startup.SeedDatabase(Blazor.LibraryExample.Server.Data.LibraryContext)">
            <summary>
            Initializes the database with test records the first time the application starts  at first time
            </summary>
            <param name="libraryContext">The library context.</param>
        </member>
    </members>
</doc>
