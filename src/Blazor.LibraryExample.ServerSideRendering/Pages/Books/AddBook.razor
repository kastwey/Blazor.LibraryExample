@using Newtonsoft.Json
@using Blazor.LibraryExample.Shared.Entities
@using Blazor.LibraryExample.ServerSideRendering.Contracts.Services
@page "/books/add/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime  JSRuntime
@inject IBookService BookService
<h2>Add new book</h2>
<EditForm Model="@book" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form">
		<div class="form-group">
			<label class="control-label" for="txtTitle">Title:</label>
			<input id="txtTitle" type="text" @bind="book.Title" />
		</div>
		<div class="form-group">
			<label for="txtAuthor">Author:</label>
			<input id="txtAuthor" type="text" @bind="book.Author" />
		</div>
		<div class="form-group">
			<input type="checkbox" id="chkCollection" @bind="book.InCollection" />
			<label for="chkCollection">Is part of a collection</label>
		</div>
		<div class="form-group">
			<button type="submit">Add book</button>
		</div>
	</div>
	</EditForm>

	@code
{

		private Book book = new Book();

		protected override Task OnInitializedAsync()
		{
			this.Title = "Añadir nuevo libro";
			return base.OnInitializedAsync();
		}

		private async void HandleValidSubmit()
		{
			try
			{
				var result = await Http.PostAsync("api/books/add", new StringContent( JsonConvert.SerializeObject(book)));
				result.EnsureSuccessStatusCode();
				var content = await result.Content.ReadAsStringAsync();
				var bookAdded = JsonConvert.DeserializeObject<Book>(content);
				NavigationManager.NavigateTo($"/books/details/{bookAdded.Id}");
			}
			catch (Exception ex)
			{
				await JsInterop.AlertAsync(JSRuntime, "Error while editing the book: " + ex.Message);
			}
		}


	}
