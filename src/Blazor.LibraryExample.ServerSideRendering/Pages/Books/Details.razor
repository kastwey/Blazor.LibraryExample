@using Blazor.LibraryExample.Shared.Entities
@using Newtonsoft.Json
@page "/books/details/{bookId}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime  jsRuntime

@if (loadingBook)
{
	<h2>Details of the book</h2>
	<p>Loading...</p>
}
else if (book == null)
{
	<h2>Book not found</h2>
	<p>The book with the specified identifier was not found.</p>
}
else
{
	<h2>Details of the book @book.Title, by @book.Author</h2>
	<dl>
		<dt>Title::</dt>
		<dd>@book.Title</dd>
		<dt>Author:</dt>
		<dd>@book.Author</dd>
		<dt>Creation date:</dt>
		<dd>@book.CreationDate.ToString("dd/MM/yyyy")</dd>
		<dt>Total downloads:</dt>
		<dd>@book.TotalDownloads</dd>
		<dt>Is part of a collection:</dt>
		<dd>@(book.InCollection ? "Sí" : "No")</dd>
	</dl>
}

@code
{
	[Parameter] public string BookId { get; set; }

	Book book;

	bool loadingBook = true;
	protected override async Task OnInitializedAsync()
	{
		try
		{
			var result = await Http.GetAsync($"api/books/details/{BookId}");
			result.EnsureSuccessStatusCode();
			var content = await result.Content.ReadAsStringAsync();
			book = JsonConvert.DeserializeObject<Book>(content);
			this.Title = $"Details of the book {book.Title}, de {book.Author}";
		}
		catch (Exception ex)
		{
			this.Title = "Detalles de un libro";
			await JsInterop.AlertAsync(this.jsRuntime, "Error when retrieving the book: " + ex.Message);
		}
		finally
		{
			loadingBook = false;
		}
	}
}
