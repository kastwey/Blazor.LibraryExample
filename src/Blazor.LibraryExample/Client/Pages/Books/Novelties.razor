@using Blazor.LibraryExample.Shared.Entities
@using Blazor.LibraryExample.Client.Components
@using Blazor.LibraryExample.Client.Dtos
@using  Blazor.LibraryExample.Client.Contracts.Agents
@using  Blazor.LibraryExample.Client.Events

@page "/books/novelties/{SPageNumber}"
@page "/books/novelties"
@inject IBookAgent BookAgent
<h2>Editorial news in this month, page @PageNumber</h2>
<p><a href="/books/add">Add new book</a></p>
<BooksTable PageNumber="@PageNumber" Type="@TableType.Novelties" TableSummary="Table with editorial news in this mont" RootPage="@this" Books="@books" OnHeaderClicked="@OnHeaderClicked" />
@code
{
	[Parameter] public string SPageNumber { get; set; } = "1";

	protected int PageNumber
	{
		get
		{
			return Int32.TryParse(SPageNumber, out int pageNumber) ? pageNumber : 1;
		}
	}

	private PaginatedResultsDto<Book> books;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		this.Title = "Editorial news in this month";
		this.books = await BookAgent.GetBooksAsync(TableType.Novelties, BookOrder.ByCreationDateDescending, string.Empty, PageNumber);
	}

	private async Task OnHeaderClicked(BooksTableHeaderClickedEventArgs e)
	{
		books = null;
		StateHasChanged();
		books = await BookAgent.GetBooksAsync(TableType.Novelties, e.BookOrder, string.Empty, PageNumber);
		this.QuerySelectorToFocusAfterRendering = $"#{e.LinkId}";
	}
}
