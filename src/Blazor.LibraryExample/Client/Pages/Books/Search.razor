@using Microsoft.AspNetCore.WebUtilities
@using Blazor.LibraryExample.Client.Components
@using Blazor.LibraryExample.Client.Dtos
@using Blazor.LibraryExample.Shared.Entities
@using Blazor.LibraryExample.Client.Events
@using Blazor.LibraryExample.Client.Contracts.Agents
@page "/books/search/"
@implements IDisposable
@inject NavigationManager NavigationManager
@inject IJSRuntime  JSRuntime
@inject IBookAgent  BookAgent

<h2>Search</h2>
<label for="TxtSearch">Search:</label>
<input type="search" id="txtSearch" @bind="txtSearch" @onkeypress="TxtSearchKeypress" />
<button @onclick="SearchBooks" @ref="btnSearch">Search books</button>
@if (!String.IsNullOrWhiteSpace(searchTerm))
{
	<h3 id="headerResults">Search results:</h3>
	<BooksTable TableSummary="Table with search results." Type="@TableType.SearchResults" PageNumber="@pageNumber" SearchTerm=@searchTerm RootPage="@this" OnHeaderClicked="@OnHeaderClicked"  Books="@books"></BooksTable>
}

@code
{

	private int pageNumber { get; set; }

	private string searchTerm { get; set; }

	private string txtSearch { get; set; }

	private ElementReference btnSearch;

	private PaginatedResultsDto<Book> books;

	private async Task TxtSearchKeypress(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			await Interop.JsInterop.FocusAsync(JSRuntime, btnSearch);
			await Interop.JsInterop.ClickAsync(JSRuntime, btnSearch);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		this.Title = "Search books";
		await GetQueryStringParametersAsync();
		NavigationManager.LocationChanged += OnLocationChanges;
	}

	private async void OnLocationChanges(object sender, LocationChangedEventArgs e)
	{
		await GetQueryStringParametersAsync();
	}

	private async Task GetQueryStringParametersAsync()
	{
		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
		searchTerm = QueryHelpers.ParseQuery(uri.Query).TryGetValue("searchTerm", out var oSearchTerm) ? oSearchTerm.First() : "";
		var hasPageNumber = QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageNumber", out var oPageNumber);
		if (!hasPageNumber || !Int32.TryParse(oPageNumber.First(), out var intPageNumber))
		{
			pageNumber = 1;
		}
		else
		{
			pageNumber = intPageNumber;
		}
		try
		{
			this.books = await BookAgent.GetBooksAsync(TableType.SearchResults, BookOrder.ByTitleAscending, searchTerm, pageNumber);
		}
		catch (Exception ex)
		{
			await Interop.JsInterop.AlertAsync(JSRuntime, $"Error while retrieving books: {ex.Message}.");
		}
		this.QuerySelectorToFocusAfterRendering = "#headerResults";
		StateHasChanged();
	}

	public override void Dispose()
	{
		NavigationManager.LocationChanged -= OnLocationChanges;
		base.Dispose();
	}

	private void SearchBooks()
	{
		if (String.IsNullOrWhiteSpace(txtSearch))
		{
			this.QuerySelectorToFocusAfterRendering = "#txtSearch";
			return;
		}
		NavigationManager.NavigateTo($"/books/search?searchTerm={txtSearch}&pageNumber={pageNumber}");
	}

	private async Task OnHeaderClicked(BooksTableHeaderClickedEventArgs e)
	{
		books = null;
		StateHasChanged();
		books = await BookAgent.GetBooksAsync(TableType.SearchResults, e.BookOrder, searchTerm, pageNumber);
		this.QuerySelectorToFocusAfterRendering = $"#{e.LinkId}";
	}
}