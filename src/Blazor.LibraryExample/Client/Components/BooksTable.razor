@using Blazor.LibraryExample.Shared.Entities
@using Blazor.LibraryExample.Client.Dtos
@using  Blazor.LibraryExample.Client.Events
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime  JSRuntime
@inherits CustomComponentBase
@if (Books == null)
{
	if (Type != TableType.SearchResults || !String.IsNullOrWhiteSpace(SearchTerm))
	{
		<p>Loading results...</p>
	}
}
else if (!Books.Results.Any())
{
	<p>No results found.</p>
}
else
{
	<PageInfo Data="@Books?.PaginationInfo" />
	<table class="table" summary="@TableSummary" id="tblResults">
		<thead>
			<tr>
				<th style="width: 30%"><a role="link" tabindex="0" id="lnkTitle" @onclick=@(async () => await ReorderResultsAsync((orderedBy == BookOrder.ByTitleAscending ? BookOrder.ByTitleDescending : BookOrder.ByTitleAscending), "lnkTitle"))>Title </a><span class="@GetOrderedByText("title")"></span></th>
				<th style="width: 20%"><a role="link" tabindex="0" id="lnkAuthor" @onclick=@(() => ReorderResultsAsync((orderedBy == BookOrder.ByAuthorAscending ? BookOrder.ByAuthorDescending : BookOrder.ByAuthorAscending), "lnkAuthor"))>Author </a><span class="@GetOrderedByText("author")"></span></th>
				<th style="width: 10%"><a role="link" tabindex="0" id="lnkCreationDate" @onclick=@(() => ReorderResultsAsync((orderedBy == BookOrder.ByCreationDateAscending ? BookOrder.ByCreationDateDescending : BookOrder.ByCreationDateAscending), "lnkCreationDate"))>Creation date </a><span class="@GetOrderedByText("creationDate")"></span></th>
				<th style="width : 20%"><a role="link" tabindex="0" id="lnkNumberOfDownloads" @onclick=@(() => ReorderResultsAsync((orderedBy == BookOrder.ByNumberOFDownloadsAscending ? BookOrder.ByNumberOfDownloadsDescending : BookOrder.ByNumberOFDownloadsAscending), "lnkNumberOfDownloads"))>Downloads number </a><span class="@GetOrderedByText("numberOfDownloads")"></span></th>
				<th style="width: 15%">Actions</th>
				<th style="width: 15%"></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var book in Books.Results)
			{
				var bookForLambdas = book;
				<tr>
					<td><a href="/books/details/@book.Id">@book.Title</a></td>
					<td>@book.Author</td>
					<td>@book.CreationDate.ToString("dd/MM/yyyy")</td>
					<td>@book.TotalDownloads</td>
					<td><a href="books/edit/@book.Id">Edit<span class="sr-only"> @book.Title</span></a></td>
					<td><a role="link" tabindex="0" @onclick="(() => DeleteBook(bookForLambdas.Id))">Delete<span class="sr-only"> @bookForLambdas.Title</span></a></td>
				</tr>
			}
		</tbody>
	</table>
	@if (Type == TableType.SearchResults)
	{
		<Pagination PaginationInfo="@Books?.PaginationInfo" QueryStringKey="pageNumber"></Pagination>
	}
	else
	{
		<Pagination PaginationInfo="@Books?.PaginationInfo"></Pagination>
	}
}

@code
{

	[Parameter] public int PageNumber { get; set; } = 1;

	[Parameter] public string TableSummary { get; set; }

	[Parameter] public TableType Type { get; set; }

	[Parameter] public string SearchTerm { get; set; }

	[Parameter] public EventCallback<BooksTableHeaderClickedEventArgs> OnHeaderClicked { get; set; }

	[Parameter] public PaginatedResultsDto<Book> Books { get; set; }

	private BookOrder orderedBy { get; set; }


	protected override void OnInitialized()
	{
		switch (Type)
		{
			case TableType.MostDownloadeds:
				orderedBy = BookOrder.ByNumberOfDownloadsDescending;
				break;
			default:
				orderedBy = BookOrder.ByTitleAscending;
				break;
		}
	}

	private async void DeleteBook(int bookId)
	{
		var result = await Interop.JsInterop.ConfirmAsync(JSRuntime, "Are you sure you want to delete this book?");
		if (result)
		{
			try
			{
				await Http.DeleteAsync($"api/books/delete/{bookId}");
				RootPage?.RefreshPage();
			}
			catch (Exception ex)
			{
				await Interop.JsInterop.AlertAsync(JSRuntime, "Error while removing the book: " + ex.Message);
			}
		}
	}

	private async Task ReorderResultsAsync(BookOrder order, string linkId)
	{
		orderedBy = order;
		if (OnHeaderClicked.HasDelegate)
		{
			await OnHeaderClicked.InvokeAsync(new BooksTableHeaderClickedEventArgs { BookOrder = order, LinkId = linkId });
		}
	}

	private string GetOrderedByText(string header)
	{
		Dictionary<string, BookOrder[]> headerDictionary = new Dictionary<string, BookOrder[]>()
{
{ "title", new BookOrder[] { BookOrder.ByTitleAscending, BookOrder.ByTitleDescending } },
{ "author", new BookOrder[] { BookOrder.ByAuthorAscending, BookOrder.ByAuthorDescending } },
{ "numberOfDownloads", new BookOrder[] { BookOrder.ByNumberOFDownloadsAscending, BookOrder.ByNumberOfDownloadsDescending } },
{ "creationDate", new BookOrder[] { BookOrder.ByCreationDateAscending, BookOrder.ByCreationDateDescending } }
};
		if (!headerDictionary.ContainsKey(header))
		{
			throw new ArgumentException("The specified header (" + header + ") isn't inside supported headers for this function.");
		}
		var orders = headerDictionary[header];
		if (orders.Contains(orderedBy))
		{
			return $" {(orderedBy.ToString().EndsWith("ascending", StringComparison.InvariantCultureIgnoreCase) ? "oi oi-arrow-top" : "oi oi-arrow-bottom")}";
		}
		return String.Empty;
	}
}

